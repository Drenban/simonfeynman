{
  "name": "file-tree",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "ui/file-tree/File.vue",
      "content": "<template>\n  <button\n    ref=\"fileRef\"\n    type=\"button\"\n    :disabled=\"!isSelectable\"\n    :class=\"[\n      cn(\n        'flex w-fit items-center gap-1 rounded-sm pr-1 text-sm duration-200 ease-in-out rtl:pl-1 rtl:pr-0',\n        isSelected && isSelectable ? 'bg-muted' : '',\n        isSelectable ? 'cursor-pointer' : 'cursor-not-allowed opacity-50',\n        $props.class,\n      ),\n    ]\"\n    :dir=\"direction\"\n    @click=\"onClickHandler\"\n  >\n    <Icon\n      :name=\"fileIcon\"\n      size=\"16\"\n    />\n    <span class=\"select-none\">{{ name }}</span>\n  </button>\n</template>\n\n<script lang=\"ts\" setup>\nimport { cn } from \"@/lib/utils\";\nimport { type TreeContextProps, type FileProps, TREE_CONTEXT_SYMBOL } from \"./index\";\nimport { inject, computed, toRefs } from \"vue\";\n\nconst props = withDefaults(defineProps<FileProps>(), {\n  isSelectable: true,\n});\n\nconst { id, name, isSelectable, isSelect } = toRefs(props);\n\nconst treeContext = inject<TreeContextProps>(TREE_CONTEXT_SYMBOL);\nif (!treeContext) {\n  throw new Error(\"[File] must be used inside <Tree>\");\n}\n\nconst { selectedId, selectItem, direction, fileIcon } = treeContext;\n\nconst isSelected = computed<boolean>(() => {\n  return isSelect.value || selectedId.value === id.value;\n});\n\nfunction onClickHandler() {\n  if (!isSelectable.value) return;\n  selectItem(id.value);\n}\n</script>\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/file-tree/Folder.vue",
      "content": "<template>\n  <div class=\"relative h-full overflow-hidden\">\n    <div\n      class=\"flex cursor-pointer items-center gap-1 rounded-md text-sm transition-all duration-200\"\n      :class=\"[\n        cn(\n          'flex cursor-pointer items-center gap-1 rounded-md text-sm',\n          isSelect && isSelectable ? 'bg-muted' : '',\n          !isSelectable ? 'cursor-not-allowed opacity-50' : '',\n          $props.class,\n        ),\n      ]\"\n      :dir=\"direction\"\n      @click=\"onTriggerClick\"\n    >\n      <Icon\n        v-if=\"isExpanded\"\n        :name=\"openIcon\"\n        size=\"16\"\n      />\n      <Icon\n        v-else\n        :name=\"closeIcon\"\n        size=\"16\"\n      />\n\n      <span class=\"select-none\">{{ name }}</span>\n    </div>\n\n    <div\n      v-if=\"isExpanded\"\n      class=\"relative text-sm\"\n    >\n      <TreeIndicator\n        v-if=\"name && indicator\"\n        aria-hidden=\"true\"\n      />\n      <div\n        class=\"ml-5 flex flex-col gap-1 py-1 rtl:mr-5\"\n        :dir=\"direction\"\n      >\n        <slot />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { cn } from \"@/lib/utils\";\nimport { type TreeContextProps, type FolderProps, TREE_CONTEXT_SYMBOL } from \"./index\";\nimport { inject, computed, toRefs } from \"vue\";\n\nconst props = withDefaults(defineProps<FolderProps>(), {\n  isSelectable: true,\n});\n\nconst { id, name, isSelectable, isSelect } = toRefs(props);\n\nconst treeContext = inject<TreeContextProps>(TREE_CONTEXT_SYMBOL);\nif (!treeContext) {\n  throw new Error(\"[Folder] must be used inside <Tree>\");\n}\n\nconst { expandedItems, handleExpand, openIcon, closeIcon, direction, indicator } = treeContext;\n\nconst isExpanded = computed<boolean>(() => {\n  return !!expandedItems.value?.includes(id.value);\n});\n\nfunction onTriggerClick() {\n  if (!isSelectable.value) return;\n  handleExpand(id.value);\n}\n</script>\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/file-tree/Tree.vue",
      "content": "<template>\n  <div :class=\"cn('size-full', $props.class)\">\n    <div\n      ref=\"rootRef\"\n      class=\"relative h-full overflow-auto px-2\"\n      :dir=\"direction\"\n    >\n      <div class=\"flex flex-col gap-1\">\n        <slot />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { cn } from \"@/lib/utils\";\nimport {\n  type TreeContextProps,\n  type TreeViewElement,\n  type TreeProps,\n  TREE_CONTEXT_SYMBOL,\n} from \"./index\";\nimport { inject, computed, toRefs, ref, onMounted, provide } from \"vue\";\n\nconst props = withDefaults(defineProps<TreeProps>(), {\n  indicator: true,\n  dir: \"ltr\",\n  openIcon: \"lucide:folder-open\",\n  closeIcon: \"lucide:folder\",\n  fileIcon: \"lucide:file\",\n});\n\nconst {\n  initialSelectedId,\n  indicator,\n  elements,\n  initialExpandedItems,\n  openIcon,\n  closeIcon,\n  fileIcon,\n  direction,\n} = toRefs(props);\n\nconst selectedId = ref<string | undefined>(initialSelectedId.value);\nconst expandedItems = ref<string[] | undefined>(initialExpandedItems.value);\n\nfunction handleExpand(id: string) {\n  expandedItems.value = expandedItems.value ?? [];\n  if (expandedItems.value.includes(id)) {\n    // If already expanded, collapse it\n    expandedItems.value = expandedItems.value.filter((item) => item !== id);\n  } else {\n    // Otherwise, expand it\n    expandedItems.value.push(id);\n  }\n}\n\nfunction selectItem(id: string) {\n  selectedId.value = id;\n}\n\nfunction setExpandedItemsFn(items: string[] | undefined) {\n  expandedItems.value = items;\n}\n\nprovide<TreeContextProps>(TREE_CONTEXT_SYMBOL, {\n  selectedId,\n  expandedItems,\n  indicator: indicator.value,\n  openIcon: openIcon.value,\n  closeIcon: closeIcon.value,\n  fileIcon: fileIcon.value,\n  direction: direction.value === \"rtl\" ? \"rtl\" : \"ltr\",\n  handleExpand,\n  selectItem,\n  setExpandedItems: setExpandedItemsFn,\n});\n\nfunction expandSpecificTargetedElements(list?: TreeViewElement[], selectId?: string) {\n  if (!list || !selectId) return;\n  function findParent(current: TreeViewElement, path: string[] = []) {\n    const isSelectable = current.isSelectable ?? true;\n    const newPath = [...path, current.id];\n    if (current.id === selectId) {\n      if (isSelectable) {\n        expandedItems.value = [...(expandedItems.value ?? []), ...newPath];\n      } else {\n        // if not selectable, pop the last item (itself)\n        newPath.pop();\n        expandedItems.value = [...(expandedItems.value ?? []), ...newPath];\n      }\n      return;\n    }\n    if (current.children?.length) {\n      current.children.forEach((child: TreeViewElement) => findParent(child, newPath));\n    }\n  }\n  list.forEach((element: TreeViewElement) => findParent(element));\n}\n\nonMounted(() => {\n  if (initialSelectedId.value) {\n    expandSpecificTargetedElements(elements.value, initialSelectedId.value);\n  }\n});\n</script>\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/file-tree/TreeIndicator.vue",
      "content": "<template>\n  <div\n    :dir=\"direction\"\n    class=\"absolute left-1.5 h-full w-px rounded-md bg-muted py-3 duration-300 ease-in-out hover:bg-slate-300 rtl:right-1.5\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport { type TreeContextProps, TREE_CONTEXT_SYMBOL } from \"./index\";\nimport { inject } from \"vue\";\n\nconst treeContext = inject<TreeContextProps>(TREE_CONTEXT_SYMBOL);\nif (!treeContext) {\n  throw new Error(\"[TreeIndicator] must be used inside <Tree>\");\n}\n\nconst { direction } = treeContext;\n</script>\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/file-tree/index.ts",
      "content": "import type { HTMLAttributes } from \"vue\";\n\nexport interface TreeViewElement {\n  id: string;\n  name: string;\n  isSelectable?: boolean;\n  children?: TreeViewElement[];\n}\n\nexport interface TreeProps {\n  class?: HTMLAttributes[\"class\"];\n  initialSelectedId: string;\n  indicator?: boolean;\n  elements: TreeViewElement[];\n  initialExpandedItems: string[];\n  openIcon?: string;\n  closeIcon?: string;\n  fileIcon?: string;\n  direction?: \"rtl\" | \"ltr\";\n}\n\nexport interface TreeContextProps {\n  selectedId: Ref<string | undefined>;\n  expandedItems: Ref<string[] | undefined>;\n  indicator: boolean;\n  openIcon: string;\n  closeIcon: string;\n  fileIcon: string;\n  direction: \"rtl\" | \"ltr\";\n  handleExpand: (id: string) => void;\n  selectItem: (id: string) => void;\n  setExpandedItems: (items: string[] | undefined) => void;\n}\n\nexport interface BaseItemProps {\n  class?: HTMLAttributes[\"class\"];\n  id: string;\n  name: string;\n  isSelectable?: boolean;\n  isSelect?: boolean;\n}\n\nexport interface FolderProps extends BaseItemProps {}\n\nexport interface FileProps extends BaseItemProps {}\n\nexport const TREE_CONTEXT_SYMBOL = Symbol(\"TREE_CONTEXT_SYMBOL\");\n\nexport { default as Tree } from \"./Tree.vue\";\nexport { default as Folder } from \"./Folder.vue\";\nexport { default as File } from \"./File.vue\";\nexport { default as TreeIndicator } from \"./TreeIndicator.vue\";\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
